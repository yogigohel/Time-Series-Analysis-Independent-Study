Sub OrganizeSegmentDataOptimized()
    Dim srcSheet As Worksheet
    Dim tgtSheet As Worksheet
    Dim tbl As ListObject
    Dim valueArray As Variant
    Dim tgtRow As Long
    Dim i As Long
    Dim startTime As Double
    
    ' Start timer to measure performance
    startTime = Timer
    
    ' Disable settings to improve performance
    With Application
        .ScreenUpdating = False
        .Calculation = xlCalculationManual
        .EnableEvents = False
        .DisplayStatusBar = False
    End With
    
    On Error GoTo Cleanup ' Ensure settings are restored even if an error occurs
    
    ' Set the source sheet to "Ticker"
    Set srcSheet = Worksheets("Ticker")
    
    ' Set the table to "Basket" in the source sheet
    Set tbl = srcSheet.ListObjects("Basket")
    
    ' Ensure the target sheet "SegmentData" exists or create it
    On Error Resume Next
    Set tgtSheet = Worksheets("SegmentData")
    If tgtSheet Is Nothing Then
        Set tgtSheet = Worksheets.Add(After:=Worksheets(Worksheets.Count))
        tgtSheet.Name = "SegmentData"
    Else
        tgtSheet.Cells.Clear
    End If
    On Error GoTo 0
    
    ' Read all values from the first column of the "Basket" table into an array
    valueArray = tbl.ListColumns(1).DataBodyRange.Value
    
    ' Add a title at the top of the target sheet
    With tgtSheet.Range("A1:C1")
        .Value = "Segment Data Overview"
        .Font.Size = 16
        .Font.Bold = True
        .Font.Color = RGB(0, 112, 192)
        .HorizontalAlignment = xlCenter
    End With
    tgtSheet.Range("A1:C1").Merge
    
    ' Set column widths for better readability
    With tgtSheet
        .Columns("A").ColumnWidth = 20
        .Columns("B").ColumnWidth = 50
        .Columns("C").ColumnWidth = 30
    End With
    
    ' Start filling the target sheet from row 3
    tgtRow = 3
    
    ' Loop through the array and populate the target sheet
    For i = 1 To UBound(valueArray, 1)
        Dim currentRow As Long
        currentRow = tgtRow + (i - 1) * 4
        
        ' Write the ticker/segment name from the "Basket" table to the SegmentData sheet
        With tgtSheet.Cells(currentRow, 1)
            .Value = valueArray(i, 1)
            .Font.Size = 14
            .Font.Bold = True
            .Font.Color = RGB(0, 112, 192)
        End With
        
        ' Merge cells for the header across columns A to C
        tgtSheet.Range(tgtSheet.Cells(currentRow, 1), tgtSheet.Cells(currentRow, 3)).Merge
        tgtSheet.Range(tgtSheet.Cells(currentRow, 1), tgtSheet.Cells(currentRow, 3)).HorizontalAlignment = xlCenter
        
        ' Insert labels and formulas
        With tgtSheet.Cells(currentRow + 1, 1)
            .Value = "Segment Label:"
            .Font.Bold = True
        End With
        tgtSheet.Cells(currentRow + 1, 2).Formula = "=FDSR(A" & currentRow & ",""FE_SEGMENT_LABEL(SALES,LABEL,BUS,+1,,Y,)"")"
        
        With tgtSheet.Cells(currentRow + 2, 1)
            .Value = "Segment Data:"
            .Font.Bold = True
        End With
        tgtSheet.Cells(currentRow + 2, 2).Formula = "=FDSR(A" & currentRow & ",""FE_SEGMENT_DATA(SALES,MEAN,BUS,+1,,Y,)"")"
        
        ' Add borders around the data block
        With tgtSheet.Range(tgtSheet.Cells(currentRow, 1), tgtSheet.Cells(currentRow + 2, 3))
            .Borders.LineStyle = xlContinuous
            .Borders.Weight = xlThin
            .Borders.Color = RGB(200, 200, 200)
        End With
    Next i
    
    ' Autofit rows for better appearance
    tgtSheet.Rows.AutoFit
    
    ' Freeze panes to keep the title visible when scrolling
    tgtSheet.Activate
    tgtSheet.Range("A3").Select
    tgtSheet.Application.ActiveWindow.FreezePanes = True
    
    ' Apply a consistent font to the entire sheet
    With tgtSheet.Cells
        .Font.Name = "Calibri"
        .Font.Size = 11
    End With
    
Cleanup:
    ' Restore settings
    With Application
        .ScreenUpdating = True
        .Calculation = xlCalculationAutomatic
        .EnableEvents = True
        .DisplayStatusBar = True
    End With
    
    ' Calculate and display elapsed time
    Dim elapsedTime As Double
    elapsedTime = Timer - startTime
    MsgBox "Segment data has been successfully organized in the 'SegmentData' sheet." & vbCrLf & _
           "Elapsed Time: " & Format(elapsedTime, "0.00") & " seconds.", vbInformation
End Sub