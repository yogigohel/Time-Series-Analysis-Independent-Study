Sub GenerateSegmentPieCharts()
    Dim srcSheet As Worksheet
    Dim tgtSheet As Worksheet
    Dim lastRow As Long
    Dim currentRow As Long
    Dim tickerName As String
    Dim segmentLabels As String
    Dim segmentData As String
    Dim labelArray() As String
    Dim dataArray() As String
    Dim i As Long
    Dim chartObj As ChartObject
    Dim chartLeft As Double
    Dim chartTop As Double
    Dim chartWidth As Double
    Dim chartHeight As Double
    Dim dataRange As Range
    Dim tempSheet As Worksheet
    Dim labelsRange As Range
    Dim valuesRange As Range
    Dim cleanupRequired As Boolean
    
    ' Start timer to measure performance
    Dim startTime As Double
    startTime = Timer
    
    ' Disable settings to improve performance
    With Application
        .ScreenUpdating = False
        .Calculation = xlCalculationManual
        .EnableEvents = False
        .DisplayStatusBar = False
    End With
    cleanupRequired = True
    
    On Error GoTo CleanupAndExit ' Ensure settings are restored even if an error occurs
    
    ' Initialize source sheet
    Set srcSheet = Worksheets("SegmentData")
    
    ' Check if source sheet exists
    If srcSheet Is Nothing Then
        MsgBox "The 'SegmentData' sheet does not exist. Please run the 'OrganizeSegmentData' macro first.", vbCritical
        Exit Sub
    End If
    
    ' Create or clear the target sheet for charts
    On Error Resume Next
    Set tgtSheet = Worksheets("SegmentPieCharts")
    If tgtSheet Is Nothing Then
        Set tgtSheet = Worksheets.Add(After:=Worksheets(Worksheets.Count))
        tgtSheet.Name = "SegmentPieCharts"
    Else
        tgtSheet.Cells.Clear
    End If
    On Error GoTo CleanupAndExit
    
    ' Initialize starting row
    currentRow = 3 ' Assuming data starts from row 3
    
    ' Determine the last row with data
    lastRow = srcSheet.Cells(srcSheet.Rows.Count, "A").End(xlUp).Row
    
    ' Loop through each ticker
    Do While currentRow <= lastRow
        ' Read the ticker name
        tickerName = srcSheet.Cells(currentRow, 1).Value
        
        ' Read segment labels and data
        segmentLabels = srcSheet.Cells(currentRow + 1, 2).Value
        segmentData = srcSheet.Cells(currentRow + 2, 2).Value
        
        ' Check if both labels and data are present
        If Trim(segmentLabels) = "" Or Trim(segmentData) = "" Then
            ' Skip if either labels or data is missing
            currentRow = currentRow + 4
            GoTo NextTicker
        End If
        
        ' Split the labels and data into arrays
        labelArray = Split(segmentLabels, ",")
        dataArray = Split(segmentData, ",")
        
        ' Ensure that labels and data counts match
        If UBound(labelArray) <> UBound(dataArray) Then
            MsgBox "Mismatch between number of labels and data for ticker '" & tickerName & "'. Skipping this ticker.", vbExclamation
            currentRow = currentRow + 4
            GoTo NextTicker
        End If
        
        ' Create a temporary sheet to hold the labels and data for charting
        Set tempSheet = Worksheets.Add(After:=Worksheets(Worksheets.Count))
        tempSheet.Name = "TempChartData"
        
        ' Populate the temporary sheet with labels and data
        For i = 0 To UBound(labelArray)
            tempSheet.Cells(i + 1, 1).Value = Trim(labelArray(i))
            tempSheet.Cells(i + 1, 2).Value = Val(Trim(dataArray(i)))
        Next i
        
        ' Define the range for labels and data
        Set labelsRange = tempSheet.Range("A1:A" & UBound(labelArray) + 1)
        Set valuesRange = tempSheet.Range("B1:B" & UBound(dataArray) + 1)
        
        ' Add the pie chart to the target sheet
        Set chartObj = tgtSheet.ChartObjects.Add(Left:=50, Top:=100 + ((currentRow - 3) / 4) * 300, Width:=400, Height:=300)
        With chartObj.Chart
            .ChartType = xlPie
            .SetSourceData Source:=Union(labelsRange, valuesRange)
            .HasTitle = True
            .ChartTitle.Text = tickerName & " Segment Distribution"
            
            ' Configure data labels to show percentages
            .ApplyDataLabels Type:=xlDataLabelsShowPercent, LegendKey:=False
            .DataLabels.ShowPercentage = True
            .DataLabels.ShowValue = False
            .DataLabels.ShowCategoryName = False
            
            ' Enhance chart aesthetics
            .PlotArea.Format.Fill.Visible = msoFalse ' Remove plot area fill
            .ChartArea.Format.Fill.Visible = msoFalse ' Remove chart area fill
            .Legend.Position = xlLegendPositionRight
        End With
        
        ' Delete the temporary sheet
        Application.DisplayAlerts = False
        tempSheet.Delete
        Application.DisplayAlerts = True
        
        ' Increment to the next ticker (each ticker occupies 4 rows)
        currentRow = currentRow + 4
        
NextTicker:
        ' Continue loop
    Loop
    
    ' Restore settings
CleanupAndExit:
    If cleanupRequired Then
        With Application
            .ScreenUpdating = True
            .Calculation = xlCalculationAutomatic
            .EnableEvents = True
            .DisplayStatusBar = True
        End With
    End If
    
    ' Calculate and display elapsed time
    Dim elapsedTime As Double
    elapsedTime = Timer - startTime
    MsgBox "Pie charts have been successfully generated in the 'SegmentPieCharts' sheet." & vbCrLf & _
           "Elapsed Time: " & Format(elapsedTime, "0.00") & " seconds.", vbInformation
           
    Exit Sub
    
    ' Error handling
ErrorHandler:
    MsgBox "An error occurred: " & Err.Description, vbCritical
    Resume CleanupAndExit
End Sub